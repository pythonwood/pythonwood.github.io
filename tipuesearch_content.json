{"pages":[{"title":"  Videos\n | Linux迷+Python粉","url":"https://blog.pythonwood.com/video/index.html","text":"\n\n\n\n\n  (adsbygoogle = window.adsbygoogle || []).push({\n    google_ad_client: \"ca-pub-3784870097299714\",\n    enable_page_level_ads: true\n  });\n\n\n\n\n  Videos\n | Linux迷+Python粉\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n人生苦短，我用Python\n\n\nLinux迷+Python粉 人生苦短，我用Python\n\n\n\n\n\nToggle navigation\n\n\n\n\nLinux迷+Python粉\n\n\n\n\n\n首页\n\n\n技术\n\n\n生活\n\n\n关于\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nVideos\non which I was director, editor, camera operator and/or lighting designer.\n\n\n\n\n\n\n\n\n\n\n\nCreepy Night Dive at Nemo 33\n\nDocumentary\n2015\n\n\n\n\n\n\n\n\nAldabra Giant Tortoise (world's largest)\n\nDocumentary\n2014\n\n\n\n\n\n\n\n\nStyle 59 — Cool Cavemen\n\nMusic Video\n2014\n\n\n\n\n\n\n\n\nSeychelles Scuba Diving\n\nDocumentary\n2014\n\n\n\n\n\n\n\n\nWhale Shark - Seychelles\n\nDocumentary\n2014\n\n\n\n\n\n\n\n\nOmashay - Live in TGV\n\nLive Music\n2013\n\n\n\n\n\n\n\n\nNemo 33: World's Deepest Pool\n\nDocumentary\n2013\n\n\n\n\n\n\n\n\nGlitch drummer\n\nLive music\n2013\n\n\n\n\n\n\n\n\n\n\n\n\n\n10227\n\nNarrative\n2013\n\n\n\n\n\n\n\n\nColor grading of 10227\n\nDocumentary\n2013\n\n\n\n\n\n\n\n\nTale of Two — Omashay\nPainting timelapse.\n\nMusic video\n2013\n\n\n\n\n\n\n\n\n\n\n\n\n\nGoodnight — Omashay\nWhen original hand-drawing meet artificial slow-motion.\n\nMusic video\n2013\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe making of Where is she?\n\nDocumentary\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\n20m Scuba Diving Pool\nFirst dive of my life at 20m.\n\nDocumentary\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\nMel+Tom Wedding Entrance\n\nNarrative\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\nColor grading of Where is she?\n\nDocumentary\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhere is she? — Omashay\nA postcard of Paris I shot in 2 days.\n\nMusic video\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaking of Burlesque Burgrary\n\nDocumentary\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\nBurlesque Burglary (multicam)\nSimulated multi-camera version of the official video.\n\nMusic video\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\nCool Cavemen, MJC de Douai\nA night in the backstages with Cool Cavemen.\n\nDocumentary\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\n4m²\nWhy all the narratives I work on have to end in tears?\n\nNarrative\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\nTomasito's Sax Solo in the Park\nThose cavemen can't go outside without being noticed.\n\nLive music\n2012\n\n\n\n\n\n\n\n\nCute Newborn Kids (Baby Goats)\nMy only attempt at a cutexploitation film.\n\nDocumentary\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\nBurlesque Burglary — Cool Cavemen\nMy first one-man project: entirely directed, shot and edited by yours truly.\n\nMusic video\n2012\n\n\n\n\n\n\n\n\n\n\n\n\n\nRadio Concert Intro — Cool Cavemen\n\nRemix\n2011\n\n\n\n\n\n\n\n\n\n\n\n\n\nBelgique mon Namurrr — Cool Cavemen\nI am the Judge Dredd of concerts. I am the light!\n\nLive music\n2011\n\n\n\n\n\n\n\n\n\n\n\n\n\nNichrome's outtakes — Cool Cavemen\n\nDocumentary\n2011\n\n\n\n\n\n\n\n\n\n\n\n\n\nNichrome (preview) — Cool Cavemen\nThe only evidence that Cool Cavemen still has unreleased songs.\n\nMusic video\n2011\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrunk Dream (acoustic) — Cool Cavemen\nCan you believe they managed to shoot that video upside-down?\n\nLive music\n2011\n\n\n\n\n\n\n\n\nWish you looked at me — Omashay\n\nMusic video\n2011\n\n\n\n\n\n\n\n\n\n\n\n\n\nTrapped in Freedom at Garage Café\n\nLive music\n2011\n\n\n\n\n\n\n\n\n\n\n\n\n\nMIDI-controlled graphics\nQuartz Composer, a MacBook and a Behringer BCF-2000.\n\nMotion graphics\n2010\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuartz Composer experiments\n\nMotion graphics\n2010\n\n\n\n\n\n\n\n\n\n\n\n\n\nKaleidoscope series\nMy first steps into Quartz Composer.\n\nMotion graphics\n2010\n\n\n\n\n\n\n\n\n\n\n\n\n\nInfo TGV: Android app by Uperto\n\nCorporate\n2010\n\n\n\n\n\n\n\n\n\n\n\n\n\nLe Duc Factory at HappyFarmFest\n\nLive music\n2010\n\n\n\n\n\n\n\n\n\n\n\n\n\nCool Cavemen at Gayant Expo\nA crowd of 3000 persons. My biggest concert as a lighting designer. I'll be forever grateful to my band for this amazing oportunity.\n\nLive music\n2010\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFusion — Cool Cavemen\n\nLive music\n2008\n\n\n\n\n\n\n\n\nKinda Country — Cool Cavemen\nThis was shot on DSLR. Nothing exceptional. But there is a twist: we were in 2007. I was definitely ahead of the curve.\n\nLive music\n2007\n\n\n\n\n\n\n\n\n\n\n\n\n资料\n\n \n\n    Github\n  \n \n\n    旧博客\n  \n\n\n\n简历\n\n \n\n    LinkedIn\n  \n \n\n    PDF简历\n  \n\n\n\n用以下方式浏览\n\n 分类\n 日期\n 标签\n\n\n\nCopyright信息\n© Copyright 2013-2016 Pythonwood.\n如未特别说明，本网站的内容使用如下协议Creative Commons\nAttribution-NonCommercial-ShareAlike 4.0 International license.\n\n\n免责声明\n本网站所表达的所有观点均为我个人的观点，并不代表我以前，现任和未来雇主或其任何关联机构，合作伙伴或客户的意见。\n\n\nRSS订阅更新\n\n 获取更新 (Atom)\n 获取更新 (RSS)\n\n\n\n\n 回到顶部\n\n\n          博客使用Pelican驱动\n          感谢Kevin Deldycke原创 Plumage 主题\n        \n\n\n\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n    ga('create', 'UA-109845932-1', 'auto');\n    ga('send', 'pageview');\n    \n\n\n\n  window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments)};\n  gtag('js', new Date());\n\n    gtag('config', 'UA-109845932-1');\n    \nvar cnzz_protocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");document.write(unescape(\"%3Cspan style='display:none;' id='cnzz_stat_icon_1270496461'%3E%3C/span%3E%3Cscript src='\" + cnzz_protocol + \"s13.cnzz.com/z_stat.php%3Fid%3D1270496461%26show%3Dpic1' type='text/javascript'%3E%3C/script%3E\")); \n\n\n\n\n\n\n\n\n","tags":""},{"title":"  Themes\n | Linux迷+Python粉","url":"https://blog.pythonwood.com/themes/index.html","text":"\n\n\n\n\n  (adsbygoogle = window.adsbygoogle || []).push({\n    google_ad_client: \"ca-pub-3784870097299714\",\n    enable_page_level_ads: true\n  });\n\n\n\n\n  Themes\n | Linux迷+Python粉\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n人生苦短，我用Python\n\n\nLinux迷+Python粉 人生苦短，我用Python\n\n\n\n\n\nToggle navigation\n\n\n\n\nLinux迷+Python粉\n\n\n\n\n\n首页\n\n\n技术\n\n\n生活\n\n\n关于\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThemes\nI customized or created from scratch.\n\n\n\n\n\n\n\n\n\n\n\nPlumage\nTheme of this blog for 2013 and onward.\n\nPelican\nJinja\nTwitter Bootstrap\nCSS\nHTML\nJavascript\n\n\n\n\n\n\n\n\n\n\n\n\n\nMaomium drawings\n2011-2012 theme of this blog, based on TwentyTen then TwentyEleven.\n\nWordPress\nCSS\nHTML\nJavascript\n\n\n\n\n\n\n\n\n\n\n\n\n\nCool Cavemen 2009\nK2 style designed with QPX for the Multipolar-era website of Cool Cavemen.\n\nWordPress\nCSS\nHTML\nJavascript\n\n\n\n\n\n\n\n\n\n\n\n\n\nDrupify fork\nFork of the Drupify theme for Cool Cavemen's online shop.\n\nDrupal\nCSS\nHTML\n\n\n\n\n\n\n\n\n\n\n\n\n\nCool Blue\n2009-2010 theme of this blog, based on K2.\n\nWordPress\nCSS\n\n\n\n\n\n\n\n\n\n\n\n\n\nSapphire for K2\nK2 port of legacy Sapphire theme by Michael Martine.\n\nWordPress\nCSS\n\n\n\n\n\n\n\n\n\n\n\n\n\nCoolkevmen\nSimple style for K2.\n\nWordPress\nCSS\n\n\n\n\n\n\n\n\n\n\n\n\n\nCool Cavemen e107 themes\nCollection of themes created between 2004 and 2008 for Cool Cavemen.\n\ne107\nCSS\nHTML\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFunky Storm themes\nWeb sites variations for my band Funky Storm between 2002 and 2004.\n\nPHP\nCSS\nHTML\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n资料\n\n \n\n    Github\n  \n \n\n    旧博客\n  \n\n\n\n简历\n\n \n\n    LinkedIn\n  \n \n\n    PDF简历\n  \n\n\n\n用以下方式浏览\n\n 分类\n 日期\n 标签\n\n\n\nCopyright信息\n© Copyright 2013-2016 Pythonwood.\n如未特别说明，本网站的内容使用如下协议Creative Commons\nAttribution-NonCommercial-ShareAlike 4.0 International license.\n\n\n免责声明\n本网站所表达的所有观点均为我个人的观点，并不代表我以前，现任和未来雇主或其任何关联机构，合作伙伴或客户的意见。\n\n\nRSS订阅更新\n\n 获取更新 (Atom)\n 获取更新 (RSS)\n\n\n\n\n 回到顶部\n\n\n          博客使用Pelican驱动\n          感谢Kevin Deldycke原创 Plumage 主题\n        \n\n\n\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n    ga('create', 'UA-109845932-1', 'auto');\n    ga('send', 'pageview');\n    \n\n\n\n  window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments)};\n  gtag('js', new Date());\n\n    gtag('config', 'UA-109845932-1');\n    \nvar cnzz_protocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");document.write(unescape(\"%3Cspan style='display:none;' id='cnzz_stat_icon_1270496461'%3E%3C/span%3E%3Cscript src='\" + cnzz_protocol + \"s13.cnzz.com/z_stat.php%3Fid%3D1270496461%26show%3Dpic1' type='text/javascript'%3E%3C/script%3E\")); \n\n\n\n\n\n\n\n\n","tags":""},{"title":"  Code\n | Linux迷+Python粉","url":"https://blog.pythonwood.com/code/index.html","text":"\n\n\n\n\n  (adsbygoogle = window.adsbygoogle || []).push({\n    google_ad_client: \"ca-pub-3784870097299714\",\n    enable_page_level_ads: true\n  });\n\n\n\n\n  Code\n | Linux迷+Python粉\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n人生苦短，我用Python\n\n\nLinux迷+Python粉 人生苦短，我用Python\n\n\n\n\n\nToggle navigation\n\n\n\n\nLinux迷+Python粉\n\n\n\n\n\n首页\n\n\n技术\n\n\n生活\n\n\n关于\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nProjects I've been involved in.\n\n\n \n\n    GitHub\n  \n \n\n    Python\n  \n \n\n    Hacker News\n  \n \n\n    Ohloh\n  \n\n\n\n\n\n\nOpen-source projects I've created:\n\n\n\n\nChessboard\nCLI to solve combinatoric chess puzzles.\n\nAuthor\nPython\n\n\n\n\n\n\n\n\n\n\nEuropean VAT database\nAll VAT rates and their territorial exceptions.\n\nAuthor\nData\n\n\n\n\n\n\n\n\n\n\nPostal Address\nParse, normalize and render postal addresses.\n\nAuthor\nPython\n\n\n\n\n\n\n\n\n\n\nPort Range\nPort range with support of CIDR-like notation.\n\nAuthor\nPython\n\n\n\n\n\n\n\n\n\n\ndotfiles\nKubuntu & macOS dotfiles for vim-based Python developers.\n\nAuthor\nvim\nbash\nUbuntu\nmacOS\nPython\n\n\n\n\n\n\n\n\n\n\nMaildir Deduplicate\nDeduplicate mails from a set of maildir folders.\n\nAuthor\nPython\n\n\n\n\n\n\n\n\n\n\n\n\nInactive\n\n\n\n\nOpenERP Matrix Widget\nA matrix widget for OpenERP's web client.\n\nAuthor\nOpenERP\nJavascript\nMako\nHTML\nCSS\n\n\n\n\n\n\n\n\n\n\n\n\nInactive\n\nopenerp.buildout\nAutomate OpenERP server and web-client installation, deployment and configuration.\n\nAuthor\nOpenERP\nPython\nBuildout\nBash\nSystem\n\n\n\n\n\n\n\n\n\nInactive\n\nCherryPy + Mako + Formish + OOOP boilerplate\nBoilerplate codebase to publishing OpenERP content on the web.\n\nAuthor\nPython\nCherryPy\nMako\nHTML\nCSS\nJavascript\n\n\n\n\n\n\n\n\n\n\n\n\nInactive\n\n\n\n\nWebPing\nCheck availability of web pages.\n\nAuthor\nPython\nHTML\nCSS\nJavascript\n\n\n\n\n\n\n\n\n\n\n\n\nInactive\n\nLive browser\nWeb app with no particular goal but play with Microsoft Live Messenger Connect API.\n\nAuthor\nPython\nCherryPy\nMako\nMongoDB\n\n\n\n\n\n\n\n\n\n\n\n\nInactive\n\n\ne107 Importer\nWordPress plugin to import news, users, pages, images and forums from e107.\n\nAuthor\ne107\nPHP\nMySQL\nWordPress\n\n\n\n\n\n\n\n\n\n\n\n\nInactive\n\nFeed Tracking Tool\nWeb-based RSS/Atom feed aggregator.\n\nAuthor\nRuby on Rails\nMySQL\nHTML\nCSS\n\n\n\n\n\n\n\n\n\n\n\n\nInactive\n\n\nScripts\nMisc. utility scripts, patches and hacks.\n\nAuthor\nPython\nBash\nPHP\nMySQL\n\n\n\n\n\n\n\n\n\nInactive\n\nfunky-storm.com\nSources of my first website ever.\n\nAuthor\nPHP\nMySQL\nHTML\nCSS\n\n\n\n\n\n\n\n\n\n\n\n\n\nOpen-source projects I've contributed to:\n\n\n\n\n\npython-mode\nVim plugin for Python developers.\n\nContributor\nvim\nPython\n\n\n\n\n\n\n\n\n\n\n\n\nWorked full-time as an OpenERP as a consultant.\n\nContributor\nPython\nPostgreSQL\nJavascript\nBackbone.js\nMako\nHTML\nXML\nCSS\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\npbp.recipe.trac\nBuildout recipe to automate management and deployment of multiple Trac instances.\n\nContributor\nPython\nTrac\nBuildout\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZope-based CMS.\n\nContributor\nPython\nZope\nZODB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nZope-based ERP framework.\n\nContributor\nPython\nZope\nZODB\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQLC\nDMX light controlling software written in QT.\n\nContributor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe most popular PHP blog engine.\n\nContributor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nContributor\nDebian\n\n\n\n\n\n\n\n\n\n\n\n\nWordPress-based forums.\n\nContributor\n\n\n\n\n\n\n\n\n\n\n\nKdenlive\nNon-linear video editor written in QT for KDE.\n\nContributor\n\n\n\n\n\n\n\n\n\n\nnlconverter\nLotus Notes to Mailbox conversion tool written in Python.\n\nContributor\n\n\n\n\n\n\n\n\n\n\n\n\n\nKDE\n\nContributor\n\n\n\n\n\n\n\n\n\n\n\n\n\nContributor\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n资料\n\n \n\n    Github\n  \n \n\n    旧博客\n  \n\n\n\n简历\n\n \n\n    LinkedIn\n  \n \n\n    PDF简历\n  \n\n\n\n用以下方式浏览\n\n 分类\n 日期\n 标签\n\n\n\nCopyright信息\n© Copyright 2013-2016 Pythonwood.\n如未特别说明，本网站的内容使用如下协议Creative Commons\nAttribution-NonCommercial-ShareAlike 4.0 International license.\n\n\n免责声明\n本网站所表达的所有观点均为我个人的观点，并不代表我以前，现任和未来雇主或其任何关联机构，合作伙伴或客户的意见。\n\n\nRSS订阅更新\n\n 获取更新 (Atom)\n 获取更新 (RSS)\n\n\n\n\n 回到顶部\n\n\n          博客使用Pelican驱动\n          感谢Kevin Deldycke原创 Plumage 主题\n        \n\n\n\n    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){\n    (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),\n    m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)\n    })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');\n\n    ga('create', 'UA-109845932-1', 'auto');\n    ga('send', 'pageview');\n    \n\n\n\n  window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments)};\n  gtag('js', new Date());\n\n    gtag('config', 'UA-109845932-1');\n    \nvar cnzz_protocol = ((\"https:\" == document.location.protocol) ? \" https://\" : \" http://\");document.write(unescape(\"%3Cspan style='display:none;' id='cnzz_stat_icon_1270496461'%3E%3C/span%3E%3Cscript src='\" + cnzz_protocol + \"s13.cnzz.com/z_stat.php%3Fid%3D1270496461%26show%3Dpic1' type='text/javascript'%3E%3C/script%3E\")); \n\n\n\n\n\n\n\n\n","tags":""},{"title":"404","url":"404","text":"404找不到页面 你访问的页面不存在怎么办？ 用google或百度搜索下关键字吧。","tags":"技术"},{"title":"50x","url":"50x","text":"","tags":"技术"},{"title":"关于","url":"关于","text":"我是Pythonwood，林中之蛇。一个依然对世界怀有好奇心并孜孜不倦折腾着的人。 小学是学奥数的，逆向思维让我终生收益（十分感谢教我麦×堂老师）。 初中的时候，因一个物理电学知识点不解，有一点存疑。向物理老师提出并帮我申请了学校实验室的临时使用。 其中很多细节已经忘记了，只模糊记得老师说:\"现在很少学生能这样……\" 高中的时候喜欢思考哲学，并对物理的质能守恒这个定律印象非常深刻，让我对事物规律的理解加深了一个层次。 大学依然喜欢哲学，并在PHD的词意中找到一种心灵共振感觉。（哲学是科学之母，任何一门学科研究到极致都一定也会触达哲学阶段。） 因为本专业要死记的太多，转而自学计算机编程，兴趣使然，坚持到现在已经超过5年了。 Linux: 研究汇编，研究计算机原理事发现的事物。从此打开了一个新世界。 Python: 为了解决一个问题，先找出所有方法，最后只剩下一个方法。这就Python，也是我的哲学。 \"只保留一个方法\"，这相对主观，并且也会改变的，但多数没有。那些改变也是因为找到更好的。 所以为什么我最喜欢python？ 因为python很哲学，我很喜欢哲学。 关于网站 这个网站从找国外vps、购买域名指向国外NS、寻找合适的写博客方式，适应pelican并找好的主题和汉化，部署HTTPS+HTTP2等等，前前后后花了不少于半年才完成。 旧博客选择的是cnblogs.com，我认为那是纯粹而且质量较高的。因为不支持markdown，本着自定义到死的无畏折腾精神，自己动手慢慢就有现在你看到的这个博客了。 2017年11月之前的文章都是从旧博客迁移过来的。","tags":"技术"},{"title":"ssh命令：隧道代理+本地端口转发+远程端口转发","url":"2016/02/ssh命令：隧道代理+本地端口转发+远程端口转发/","text":"0、前言 nc是一个在网络连接两端的好工具，同时也是也个临时的端口转发的好工具。（永久的端口转发用什么？用iptables） ssh也是这方面的好工具，好处是加密可靠可复用在一端操作即可，代价是要有登录帐号。 我们知道， SSH 会自动加密和解密所有 SSH 客户端与服务端之间的网络数据。但是， SSH 还同时提供了一个非常有用的功能，这就是端口转发。它能够将其他 TCP 端口的网络数据通过 SSH 链接来转发，并且自动提供了相应的加密及解密服务。 1、隧道带理 典型应用：翻越高墙 需要条件：一个国外vps，一个不需要登录（安全）的帐号，一个命令。 vps新建帐号： useradd -g nobody -s /sbin/nologin gfw && echo gfw_Passw0rd | passwd --stdin gfw 本地ssh连接： ssh -NfD 6666 gfw@vps -p 2222 可选转换：使用privoxy把socks5代理变成http代理供svn，pip，gem，curl等工具使用。 2、本地端口转发 我们可以将远程机器（LdapClientHost）上的应用直接配置到本机的 7001 端口上（而不是 LDAP 服务器的 389 端口上）。在 LdapClientHost 上执行如下命令即可建立一个 SSH 的本地端口转发，例如： ssh -L 7001:localhost:389 LdapServerHost 之后的数据流将会是下面这个样子： 我们在 LdapClientHost 上的应用将数据发送到本机的 7001 端口上， 而本机的 SSH Client 会将 7001 端口收到的数据加密并转发到 LdapServertHost 的 SSH Server 上。 SSH Server 会解密收到的数据并将之转发到监听的 LDAP 389 端口上， 最后再将从 LDAP 返回的数据原路返回以完成整个流程。 3、远程端口转发 我们在 LdapClientHost 上的应用将数据发送到本机的 7001 端口上，而本机的 SSH Server 会将 7001 端口收到的数据加密并转发到 LdapServertHost 的 SSH Client 上。 在 LDAP 服务器（LdapServertHost）端执行如下命令： ssh -R 7001:localhost:389 LdapClientHost 区别： SSH 端口转发自然需要 SSH 连接，而 SSH 连接是有方向的，从 SSH Client 到 SSH Server 。而我们的应用也是有方向的，比如需要连接 LDAP Server 时， LDAP Server 自然就是 Server 端，我们应用连接的方向也是从应用的 Client 端连接到应用的 Server 端。如果这两个连接的方向一致，那我们就说它是本地转发。而如果两个方向不一致，我们就说它是远程转发。 4、使用autossh防网络抖动+supervisior进程守护。 autossh解决的问题：远程端口转发一旦端口，很难再次建立。 autossh -M 1932 -NR 1922:localhost:1122 user@vps -p 1122 ps可以看到实质是这样的： ssh -L 1932:127.0.0.1:1932 -R 1932:127.0.0.1:1933 -NR 1922:localhost:1122 -p 1122 user@vps 分析：使用回路，将本地1933端口，（远程转发）映射到远端1932，（本地转发）到本机的1932。形成回路。 supervisior解决的问题：autossh的进程守护 因此，使用supervisior守护autossh，autossh守护ssh。达到自动启动和守护端口转发的目的。 5、综合使用 案例一、如何2222端口被封，如果绕过封死2222端口的防火墙直接ssh到内网机器。（就是说限某几个端口是有局限的） 1、登录最重要的机器把2222端口映射到12222端口： ssh -gfNL 12222:0.0.0.0:2222 localhost -p2222 2、使用该机器做隧道代理访问其他内网机器： ssh -NfD 10000 user@host -p12222 3、ssh绕道访问其他内网机器： ssh -o \"ProxyCommand=nc -x localhost:10000 %h %p\" user@host -p2222 巧妙结合的ssh和nc，都是linux自带工具，没有依赖。 案例二、借助远程vps让两台不能直接相通的机器相互能访问。 有主机vps和主机A、B。A、B无法直连，通过\"中介\"搭桥相连。（两台机器都能主动ssh到vps就能完成。） A要ssh到B（B要ssh到A是同理）： 1、主机B用ssh远程转发自己的2222端口到vps的127.0.0.1:12222 ssh -NfR 12222:127.0.0.1:2222 user@vps -p2222 2、主机A用ssh本地转发vps的127.0.0.1:12222到本地的127.0.0.1:12222 ssh -NfL 12222:127.0.0.1:12222 user@vps -p2222 3、主机A登录主机B ssh user@localhost -p12222 参考： 实战 SSH 端口转发 https://www.ibm.com/developerworks/cn/linux/l-cn-sshforward/ 使用supervisor托管shadowsocks https://blog.phpgao.com/supervisor_shadowsocks.html SSH反向连接及Autossh http://www.cnblogs.com/eshizhan/archive/2012/07/16/2592902.html","tags":"技术"},{"title":"微信开发python+django两个月的成功经历，django是个好框架！","url":"2014/06/微信开发python+django两个月的成功经历，django是个好框架！/","text":"时间：大三 上学期没有用微信内置浏览器而纯对话开发，坑了自己好一下。 下学期选错bottle框架，以为轻量好，谁知开发中什么都自己来很痛苦。 选对了框架django，终于在大三最后的个把月里写出了里程碑式的现在这个微信端，自己都感动到，作为我大三一年web开发的终结吧。 亮点1：自带后台管理 亮点2：后台权限管理 亮点3：微信回复规则设置去代码化，图形界面。 亮点4：一平台多网店 亮点5：图片自动缩略成200*300px大小（使用了七牛空间） 亮点6：gzip压缩，网络流量为原来33%左右。SAE中Gzip压缩设置 亮点7：保存接受的所以文本消息，记录永存！ 亮点8：购买者可查看历史订单，购买总额等。 亮点9：后台可查看用户下单总额，最近下单时间等等。 亮点10：商店信息，商品信息均在后台直接修改。 亮点11：平台创始人可强制商店下线。 技巧：微信规则不匹配时不能回复吗？不是，规则包含空字符总能匹配任意文本，请看下面的微信规则截图。 后台 选择botlle框架，自己写sql，便学边用，很痛苦的换了20天作出来了微信 第一版 。这版其实很简陋，但其给我的经验很重要。演示地址： 点击入口 。 抛弃bottle，选择django，后来证明我的选择是对的，虽然学习坡度比较大，但是其框架本身带来的效率和效益却是学习框架本身的好几倍。我喜欢它的自带后台管理，和后台权限管理，更喜欢它的ORM，省去很多sql的事情，比如sql语句编写，sql防注问题，sql迁移方便等等。这次用上了这三大功能，另外还巧用django的模板渲染实现微信回复功能，但这不是django特有。 微信已经实现了多店功能。这也是当初我为什么坚定选择django，因为django的一project多app的架构刚好契合这个一平台多店铺的想法。后来我学scrapy框架，发现也是一project多app，方便不少。同时说明一project多app是先进的，是趋势之一。 前台 我比较喜欢后端的开发，前端的我就修改已有好的前端代码，参考了微信公众号\"果然美\"，\"微果大爱\"，\"华农果满堂\"，\"微盟\"，\"乐外卖\"等前端设计。技术上使用html5+css3。 现在平台上有果色天香和澳洲红酒两个店铺 代码统计 使用linux shell统计 合理版 cat $(find . -name \" .py\" -or -name \" .yaml\" -or -name \"*.rst\" -or -name \"sell_detail.html\") | wc | sed \"1i static:\\nlines | words | bytes\" 纯净版 cat $(find . -path \"./guosetianxiang\" -prune -or -name \" .py\" -or -name \" .yaml\" -or -name \"*.rst\" -or -name \"sell_detail.html\") | wc | sed \"1i static:\\nlines | words | bytes\" 完全版 cat $(find . -name \" .py\" -or -name \" .yaml\" -or -name \" .rst\" -or -name \" .html\") | wc | sed \"1i static:\\nlines | words | bytes\" 前端展示：感谢前人成果！ =============================后台是亮点============================= 后台首页 微信回复规则，使用模板渲染自定义变量！ 功能代码： 微信用户 订单截图 看到这里，你是否也认为django是个好框架呢？ 在新浪云上运行得还好，不算慢，请那些嫌弃django臃肿庞大，速度慢的人，不要再误导他人，这就好像那些说python慢的人一样，我至今没有实践证明出过慢在哪。 django是python作者本身都很喜欢的框架，又是那么多商用网站的框架，经得其考验。 如果可以，当然希望你可以作出一个比django更好的框架，可是至少现在还不大可能。python的django和ruby的rails都得经过时间的考验。我相信 django 是经得住考验的，正如我相信python一样。 附上 增加微店步骤（澳洲红酒为例） 复制guosetianxiang 改名 aozhouwine 修改setting.py 安装app ‘aozhouwine' 访问/syncdb-online完成数据库同步 根app的url.py 加入两行: import aozhouwine ... url ( r '&#94;aozhouwine/' , include ( 'aozhouwine.urls' )), admin管理，weixinshop应用商店表中增加一条，并增加账户给商店所有者A，然后授权。 A在自己的应用商店信息表中增加一条记录，(token在此设置)。 微信开发者url: /aozhouwine/weixin/ token为之前设置的。 访问/aozhouwine/sync_shopinfo完成商店同步。 A增加消息，回复规则表中的记录。 A上架商品。 依然涉及少量代码操作，以及有一点繁琐。","tags":"技术"},{"title":"腾讯2014实习面经——记一个非计算机学生的首次面试","url":"2014/04/腾讯2014实习面经——记一个非计算机学生的首次面试/","text":"地点：华南理工大学大学城校区，为广州考点。 流程：网申3.X + 笔试4.12 + 一面4.15 + 二面4.17 + 三面4.19 + 签约4.25 前言 腾讯实习招聘笔试到拿到offer（软件工程师-研发反向），历时两星期，只算笔试到终面的话则是一星期，效率比阿里要好。 腾讯是我的处面，一路过来我没有夸张，只是平实的叙述我的故事，认真谨慎的答问。 我容易紧张，但幸好没有太紧张。 2014-3-18 网申（宣讲会在大学城太远了跳过～呵呵） ( 0 ) 准备： 1、寒假就开始准备，主要是重拾算法，发现没之前开始学编程那么难了。 2、寒假期间pythontip有个挑战python，做72题后排第三名。挑战最长回文，最长上升子串等算法题，综合能力提升。 3、看完《编程珠玑》和《编程之美》。 4、google面经，做往年题练手。 5、Linux下gcc+vim实践7大经典排序算法（这个效用较高）。 6、精心准备的简历，3月8号就做了1.0版，后修改不下10次，要求尽量简洁美观。 2014-4-12 周六 14:30 - 16:00 笔试 ×—× 心情： 1、收到信息，知道阿里笔试被鄙视了。 2、三个项目在手（都是不感冒的web项目-_-）。 3、报大创，课程作业，等等等等……，一个字，累！ 内容： 1、20不定选择（一半把握）填空5题（4题把握）附加2题（会后一题）。 2、C语言C++，操作系统，网络，数据库，经典算法，数学IQ题加起来占80%以上吧。 感受： 做的不上不下，做得快，但修改得多。交卷到了，还把一题对的改错了，囧。 后记： 1、打击过后的我只敢保守地估计，谨慎地乐观，默默地独自回校。 2、心中感觉一些轻松，一些冷漠，像我本是局外人。 2014-4-15 周二 10:00 - 11:00 一面 单面 T_T 过程： 1、面试官是位大叔，讲话少，自我介绍时\"嗯\"了很多，有时闭着眼在听。 2、以C语言的宏的作用是什么开头，问了我很多广泛问题。 3、幸好C语言，C++我都记得，答取结构偏移址，宏用途，宏在C与C++之间重要性的区别还答得上。 4、但是问到数据库时瘪了，索引什么的更是一知半解（本来至少应该摆个二分法），大数据找重也不好的。最记得让我描述http协议，我不知从何说起，各点都提一提。 5、我尝试过避开这些，引导到Linux上，无效。越到后面我就越觉得机会小。 6、最后让我一边去写strcpy，我用了assert，并加上测试，还应此知道缺const。 感受： 1、没玩过游戏，但我觉得一个初出茅庐的0级玩家被40级玩家虐的时候也是这样吧。 2、我知道简单问题考细节，幸好这时刻这点我做得不错。 3、从专业名看到话面试官还是以为我技术出身，幸好后来我答题时明确说明了。 4、答题是不坚定，没自信，这是我的弱点。 后记： 1、阿里铩羽而归后的又一次打击，本来觉得我应该无后文，继续华为，小米，百度实习关注填表。 2、我后来惊喜收到二面短信，可能和我很重实践，Linux，github，操作系统代码有关。 3、当时答得不太好的如socket，进程通信，netstat -ptln我都马上复习了，为了别的面试。结果让我在二面表现更好。 2014-4-17 周四 8:30 - 9:00 二面 单面 - 过程： 1、自我介绍8分钟，以Ubuntu14.04正式版发布这开源新闻开始，还是那篇讲学习经历和项目的自我介绍。最浓缩就是：windows->Linux->Python。期间他有打断问我具体细节，我都详细作答了。 2、他问我有没有纸，我说8太早了工作人员让我直接去房间。面试官有些失望的样子，我在暗想，草稿纸算法题目必需的，这是对我故意的眷顾，会不会是上个面试官的特意安排吗？不知道，也许就是偶然的幸运。 3、面试问题问细节比较多，问的深度和一面挺像，所以感觉没什么压力。 4、面试官过程中礼貌而中肯地多次说\" OK \"，最后说\" OK ，现在你有几分钟时间问我问题。\"。 5、我问了腾讯与开源的一个烟雾弹问题，还问微信未来是否会像易迅一样开微店，——干脆利三个字\"有可能\"——意料之中，然后我们最后握手告别。 感受： 1、一开始面试官就看出我的紧张，他笑着指出了。还好之后整个过程都比较轻松。 3、能到这里其实我是满足的，不管怎样。 4、我在最后的一瞬间感觉到了一种肯定，那握手和神情。但我依然很保守地乐观。 后记： 1、出来后心情，做番201去星海过程中观赏者大学城。 2、回去过程在回想面试，面试官给我感觉挺好的，他当时穿了米黄色衬衫，中等身高有点胖，印象中头发有点蓬松，和脸相搭。 3、出来后直到回学校，觉得我是幸运的。 2014-04-19 周六 15:22 - 15:37 三面 单面 ( w ) 感受： 1、微信状态变成HR面是很开心，因为有HR不怎么刷技术岗之说。同时感概些许，也许就在前面了，但我告诫自己绝不能倒在这关。 2、告诉舍友我到HR时，他们都为我高兴了，我们笔试时几乎全宿舍都去了（光说动员，6人中5人去了-_-）。 3、紧张而兴奋，期待而舒畅的等待着。 过程： 1、面试官还是男性，还是那份简历，还是华工大学城中心酒店。 2、15分钟，自我介绍，和HR聊天，我不太健谈，不过还算一个愉快的过程。 3、最后让问问题，查笔试成绩没成，问可能去向问到了。 后记： 2014-04-25，offer终签成，一件好事来了。哈哈。 面试经历总记： 我是个粗心人! 1、14号晚收到一面通知在15好，而我以为当天是13号，睡前发现这个\" BUG \"，起来准备到2点才睡，第二天7点起床。 2、微信查进度jg这两字符总漏了，\"修复\"后得到第一个回复是处在到HR面中。我的色弱也许占部分原因。 3、我是个不懂得察言观色，后知后觉型小傻呆。所以无法把握自己的面试，最近有看《Lie To Me》，对没能运用这知识有点遗憾。 我是个认真务实好学的人！ 1、自学C/C++，java，html/css/js，kenerl，Linux，Shell，Python等等。 2、为应聘做了很多的准备，寒假就开始，有针对性的练习算法，多次锤炼简历，2小时准备的自我介绍586字。 3、不懂时就问，敢问，问得很多，感觉有时被鄙视了（我想懂得范畴以外，我都是白痴）。 4、边学边实践，边看书籍，边写敲键盘。因此记得还算牢固，学习速度还可以。 5、不是到用的时候才有，而是到用的时候来总结。所以不会被问到哑口无言。 经验总结 后来我猜，自学能力，多种语言，C/C++功底，Linux，blog，github，项目，这些是决定我能留下来的组成部分。 其他： 我是谁？ 我是大学开始自学技术的商科学生 1、技术的我：一个Linux与Python爱好者，关注开源和C/C++，使用Vim编辑器，喜欢Shell下工作。（技术宅？不是的，希望像耗子大叔一样。） 2、学生的我：一个商科11届大学生，来自广东文科老二，理科老三的（按高考分数线的话）211暨南大学( JNU )。大学以自学副业为主，暂没获得过奖学金。 3、生活的我：爱好比较广泛（童心OR好奇心……随便吧-_-）；历史(春秋迷)，登山(户外迷)，排球还不错，听电台，LoveQ。听电台的90后不多了，我就是其中之一，嘻！ 关于 关于简历。word是彩版，但印的是黑白，怕面试官认为华而不实。（-_-,也许心疼成本才是真，囧）。 关于招聘。搜\"算法+数据结构\"可能还不如你搜\"笔试面经\"获得的结果好，强，全。 关于经验。腾讯2013暑期实习生招聘经历分享对我很有帮助，作者是同校同乡的上一届师兄。这后来成为我写本文的原因一部分。 关于暨大。个人认为腾讯与暨大之间存在信息不对称问题，结果导致暨大实习生比例过低。前几年均如此。当然也不排除暨大自身问题啦。 关于腾讯。我明白获得实习offer只是开始，但是腾讯给出的资薪待遇挺不错的，至少对于我，呵呵。 关于自学。图书馆 -> google -> 独立博客 -> rss鲜果 -> 开源。遇见Linux是转哲点。 我用到过的好资源共享： 别的程序员是怎么读你的简历的 http://coolshell.cn/articles/1695.html 找工作笔试面试那些事儿（系列） http://blog.csdn.net/han_xiaoyang/article/category/1664765 白话经典算法 http://blog.csdn.net/morewindows/article/details/17488865 程序员面试、算法研究、编程艺术、红黑树、数据挖掘5大系列集锦 http://blog.csdn.net/v_july_v/article/details/6543438 2014年计算机求职总结–准备篇 http://blog.csdn.net/luckyxiaoqiang/article/details/13000431 《程序员编程艺术 — 面试和算法心得》 https://github.com/julycoding/The-Art-Of-Programming-By-July 《剑指Offer——名企面试官精讲典型编程题》博客 http://zhedahht.blog.163.com/","tags":"技术"},{"title":"IPython，让Python显得友好十倍的外套——windowsXP、Win7安装详解","url":"2014/04/IPython，让Python显得友好十倍的外套——windowsXP、Win7安装详解/","text":"前言 学习python，官方版本其实足够了。但是如果追求更好的开发体验，耐得住不厌其烦地折腾。那么我可以负责任的告诉你：IPython是我认为的唯一显著好于原版python的工具。 整理了《Python 二三事》： http://pre-sence.com/archives/python-intro 《Python 四五事》： http://pre-sence.com/archives/python-misc 并加入安装IPython部分。 写这篇随笔的原因是：忽然醒悟之前我安装IPython折腾许久不成功可能是我未能想起pip或easy_install这两个python的上帝工具。参考：Python包管理工具pip与easy_install 个人经验总结：IPython，是学习python的利器，是让Python显得友好十倍的外套，是我唯一的强烈推荐。 安装IPython 任何Linux发行版对编程者都十分友好： Ubuntu为例: sudo apt-get install ipython windows环境: 1、下载[ez_setup.py][ez_setup.py] ，右击左边链接，另存为，使用 python ez_setup.py 运行，或直接双击。 2、步骤1成功后，cmd下输入命令 easy_install -h 可以测试，正常反应说明已经可以使用easy_install了。 3、cmd下输入 easy_install pip 安装pip，这是因为pip正是easy_install的下一代，比easy_install好用。 4、步骤3成功后， pip install ipython 。 5、如果步骤4不行，退一步，使用 easy_install ipython 安装。 运行IPython cmd提示符下，输入ipython运行就可以使用除了原python外，IPython多出来的贴心的\"I\"了。 退出IPython 与python一样也是输入 exit Python实用技巧： 1、关于 \"_\" 字符使用 在 Python shell 下 _ 总是被赋予之前最后一个表达式的值（注：@pythonwood）。这里看个例子应该就能清楚： >>> import string >>> string . letters 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ' >>> print _ abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ >>> 2014 2014 >>> v = _ >>> v 2014 举个实际的例子，比如你在调试时读文件的时候直接进行 f.read() ，你看了看发现输出结果很有意思，想要对它进行进一步处理，但发现读的时候忘记赋值了。以往你只能叹叹气重新开文件再读一次，现在你只要执行 result = _，把 _ 附到另外一个变量就可以了。 2、python -m 相信很多人应该用过这个东西，Python 很多标准库都提供这样的调用方式来实现一些简单的命令行功能。Python 3 现在自带 pip。比如我们想使用 Python 3 的 pip 来安装别的库，我们可以这样： py -3 -m pip install bottle 跟你预料的一样，这样就可以了。当然你可以用个 .bat 文件来把这些包裹起来并放在 Path 上，一个简单的例子，把下面的内容写到一个叫 pip3.bat 的文件里: @echo off py -3 -m pip %* 并放到 Path 上，就可以方便调用了。其中 %* 负责传递所有的命令行参数。 实际上 python -m 可以用的东西还真的挺多，这里给出一个不完全的列表： ###################################################### # 最强功能 ###################################################### # 局域网共享，宿舍中任意一台笔记本都可以瞬间变身web资源共享服务器 # 命令ipconfig可以看到局域网ip地址，一般是192，172这些开头的。 # 使用本机80端口，可任意设置。只共享当前运行目录。 # python -m SimpleHTTPServer 80 # # 本机任意浏览器输入 http://localhost 或 http://127.0.0.1 可以访问。 # (80端口浏览器默认的，不需输入)甚至在地址栏直接输入localhost即可。 # 局域网，（宿舍）任意电脑输入上面所说192或172等开头的IP地址即可访问。 ###################################################### # 缩进输出 JSON echo {\"hey\" : \"kid\"} | python -m json.tool # 简单的执行时间测量 python -m timeit [ix*ix for ix in range(100)] # 简单的 Profiling python -m cProfile myscript.py # 比较两个文件夹的区别 python -m filecmp path/to/a path/to/b # base64 转换 echo foo bar | python -m base64 # 调用默认浏览器打开一个新标签页 python -m webbrowser -t http://google.com # 生成程序文档 python -m pydoc myscript.py # 类似 nose 的自动搜索 unittest python -m unittest discover # 调用 pdb 执行代码 python -m pdb myscript.py IPython实用技巧： 1、Tab自动补全，一种是简单的关键字补全，另外一种是对象的方法和属性补全。 作为例子，我们先引入 sys 模块，之后再输入 sys. (注意有个点)，此时按下 tab 键，IPython 会列出所有 sys 模块下的方法和属性。 接着上面的例子，我们输入 sys?，这样会显示出 sys 模块的 docstring及相关信息。很多时候这个也是很方便的功能。 2、IPython 还有强大之处很大部分还体现在它的 magic function 中。它是指的在 IPython 环境下执行以 % 开头的一些命令来对 IPython 进行一些设定或者执行某些功能。在 IPython 中输入 %lsmagic 就能列出所有的 magic functions。在这里简单介绍下几个比较有意思的，你也可以自己通过查看文档来找找有哪些你特别用的到得。 之前看到能用 ? 来查询函数的文档，对于 magic function 也是如此。比如 %run ? 。 ! cd .. 在命令前面加上 ! 则它会被作为命令行命令执行，这样你就不用退出 IPython 来进行命令行操作。 %run foo . py 在当前环境下直接执行 foo . py ，效果跟命令行下调用 ipython foo . py 相同。 %time foo . bar () 跟 timeit decorator 作用相同，进行简单的 profile 。 %hist 能显示之前输入过的命令的历史，同时你可以用 In [ < linenumber > ] 来访问之前的命令。比如 %exec In [ 10 ] 就能执行列表中第十行。 %rep 类似上面的 _ 变量，但是是以字串的形式返回 最后，如果 %automagic 是打开的状态的话，所有 magic function 不需要在前面加 % 就能正确调用。 在当前 IPython 版本中还有一个由于安全原因没有默认引入的 %autoreload，它的作用是在可以自动重新载入你调用的函数，以及其相关模块。接触过 django 的同学对这个应该比较熟悉，在 IPython 中的效果就是，当你在调试一个一直在反复改动的函数时，你可以开启这个功能保证每次调用都会重新读取最新的版本，让你在源码中的改动马上生效。在 IPython 中执行 import ipy_autoreload %% autoreload 2 这样 IPython 会对所有的模块都进行 autoreload。你可以通过执行 %autoreload? 来查询它的文档来进行进一步设定。如果你希望 IPython 每次启动自动载入次功能，那么可以通过配置 ipythonrc (在 Windows 下可以在 C:\\Users\\ _ipython\\ipythonrc.ini 找到) 来进行相关设置。 3、还有一个很神奇的功能。如果你的程序是由命令行开始执行的，即在命令行下输入 python foo.py（大部分 Python 程序都是），那么你还可以利用 IPython 在你的程序任意地方进行断点调试！ 在你程序中任意地方，加入如下语句： from IPython.Shell import IPShellEmbed IPShellEmbed ([])() 注意：最近 IPython 发布了 0.11 版本，各方面变化都非常大， API 也经过了重新设计。如果你使用的是 0.11 那么上面两行对应的是这样的: from IPython import embed embed () 再和平常一样运行你的程序，你会发现在程序运行到插入语句的地方时，会转到 IPython 环境下。你可以试试运行些指令，就会发现此刻 IPython 的环境就是在程序的那个位置。你可以逐个浏览当前状态下的各个变量，调用各种函数，输出你感兴趣的值来帮助调试。之后你可以照常退出 IPython，然后程序会继续运行下去，自然地你在当时 IPython 下执行的语句也会对程序接下来的运行造成影响。 这个方法我实在 这里 看到的。想象一下，这样做就像让高速运转的程序暂停下来，你再对运行中的程序进行检查和修改，之后再让他继续运行下去。这里举一个例子，比如编写网页 bot ，你在每取回一个页面后你都得看看它的内容，再尝试如何处理他获得下一个页面的地址。运用这个技巧，你可以在取回页面后让程序中断，再那里实验各种处理方 法，在找到正确的处理方式后写回到你的代码中，再进行下一步。这种工作流程只有像 Python 这种动态语言才可以做到。 4、一个实际的例子 这里以一个简单的例子来讲解一下是怎样的一个情况。我们要写一个可以将简单的数据表达式，类似 1 + (2 - 3) * 456 解析成树的 Pratt Parser。首先我们需要一个 lexer 把每个 token 解析出来，那么最开始的代码就是： # simple math expression parser def lexer(s): '''token generator, yields a list of tokens''' yield s if __name__ == '__main__': for token in lexer(\"1 + (2 - 3) * 456\"): print token 明显这个没有任何意义，但现在程序已经有足够的东西能够跑起来。我们把这个程序存为 expr.py，开启一个命令行窗口，运行 ipython 然后像这样执行它： $ ipython IPython 0 .13.1 -- An enhanced Interactive Python. ? -> Introduction and overview of IPython ' s features. ... In [ 1 ] : run expr.py 1 + ( 2 - 3 ) * 456 在 IPython 里面用 run 跑的好处有很多，首先是你在程序执行完毕后整个程序的状态，比如最后全局变量的值，你写的函数这些你都是可以随便执行的！同样的你可以在 IPython 里面保存一些用来测试的常量，每次用 run 跑的话新的程序会被重新载入，你可以这样方便的测试每个函数，有一个非常动态的环境来调试你的程序： In [2]: print token # 注意这里 token 就是 __main__ 里面的那个 token 的值 1 + (2 - 3) * 456 In [3]: print list(lexer('1+2+3')) # 可以运行你写的函数 ['1+2+3'] 然后按照之前的想法，我们尝试把这个 lexer 写出来。在这个过程中，IPython 可以用来查看函数的文档，测试如何调用某些函数，看看返回值是什么样子等等，还是跟上面的说的一样，我们有一个动态的环境可以真真正正的执行程序，你可以 在把代码写到你珍贵的主程序之前就有机会运行它，这样你可以更确认你的代码能正常工作： In [4]: s = \"foo\" # 忘记判断字符串是数字的函数的名字了，用一个字符串试试看 In [5]: s.is # 开头大概是 is，这里按下 tab 键 IPython 会帮我们补全 s.isalnum s.isalpha s.isdigit s.islower s.isspace s.istitle In [6]: s.isdigit? # 结果是 isdigit，在表达式后加上问号并回车查看文档 Type: builtin_function_or_method String Form:<built-in method isdigit of str object at 0x1264f08> Docstring: S.isdigit() -> bool Return True if all characters in S are digits and there is at least one character in S, False otherwise. In [8]: s.isdigit() # 调用试试看 Out[8]: False In [9]: 'f' in 'foo' # 试试字符串能不能用 in 来判断 Out[9]: True 确认了各个步骤以后，我们把 lexer 的代码填起来。我们为了节省纵向的空间我们把很多东西写在一行里面： # simple math expression parser ( broken lexer ) def lexer ( s ): '''token generator''' ix = 0 while ix < len ( s ): if s [ ix ] . isspace (): ix += 1 if s [ ix ] in \"+-*/()\" : yield s [ ix ] ; ix += 1 if s [ ix ] . isdigit (): jx = ix + 1 while jx < len ( s ) and s [ jx ] . isdigit (): jx += 1 yield s [ ix : jx ] ; ix = jx else : raise Exception ( \"invalid char at %d: '%s'\" % ( ix , s [ ix ] )) yield \"\" if __name__ == '__main__' : print list ( lexer ( \"1 + (2 - 3) * 456\" )) 看起来不错，我们还是在 IPython 里执行试试，结果发现程序抛出了一个异常: In [ 6 ] : run expr . py ------------------------------------------------------------------ Exception Traceback ( most recent call last ) py / expr . py in < module >() 18 19 if __name__ == '__main__' : --- > 20 print list ( lexer ( \"1 + (2 - 3) * 456\" )) py / expr . py in lexer ( s ) 13 yield s [ ix : jx ] ; ix = jx 14 else : --- > 15 raise Exception ( \"invalid character at ...)) 16 yield \" \" 17 Exception : invalid character at 3 : ' ' 嗯？好像程序里已经处理了空格的情况。怎么会这样？不知道你碰到异常的时候一般都怎么办。你可能会选择到处添加 print，用 IDE 断点调试。其实这种情况用 pdb 是很明智的选择，在 IPython 里我们可以非常轻松的使用它。 In [13]: pdb # 开启 pdb ，这样在异常的时候我们会自动的 break 到异常处 Automatic pdb calling has been turned ON In [14]: run expr.py ----------------------------------------------------------------- Exception: invalid character at 3: ' ' > py/expr.py(15)lexer() 14 else: ---> 15 raise Exception(\"invalid char at ...)) 16 yield \"\" ipdb> print ix # 这里我们可以执行任何 Python 的代码 3 ipdb> whatis ix # 也可以用 pdb 提供的命令，输入 help 可以查看所有命令 <type 'int'> 通过方便的调试和仔细检查代码，我们发现是没有正确的使用 elif 造成了问题！（我知道这个过程不是太符合情理…）。把代码里的后面的几个 if 都换成 elif 以后我们发现结果基本上是对的了。我们可以马上再跑几个类似的例子，确认不同的输入是否都有比较好的结果： In [18]: run expr.py # 这次差不多对了，我们可以试试几个别的例子 ['1', '+', '(', '2', '-', '3', ')', '*', '456', ''] In [19]: print list(lexer(\"1*123*87-2*5\")) ['1', '*', '123', '*', '87', '-', '2', '*', '5', ''] # 跟在 shell 里面一样，你可以用上下来选取之前的记录，然后简单的修改再重新执行。 # 记得每次 run 后你的函数都是最新版本，你可以很简单的用重复的数据来测试你的函数 # IPython 甚至还实现了 Ctrl+R！自己试试看吧 In [19]: print list(lexer(\"1 + two\")) Exception: invalid character at 2: 't'... 在一段痛苦的调试之后，我们最终把程序写 出来 了。很遗憾程序超出了我预计的长度，就不贴在这里了。后面部分的开发过程跟前面基本还是一样，总结起来就是： 保持你的程序是一个可以运行并且有意义的状态，尽可能频繁的运行。 在 IPython 里查看文档，尝试小的程序片段，测试些你不确定的做法，确定之后再把东西添加到你的代码里。 用不同的参数在 IPython 里测试你正在编写的函数/class。 当遇到问题的时候，先简单的用 pdb 在异常处 break，十有八九都能有些头绪。 额外的注意事项 这里举的例子是你所有的开发都是在单个 .py 文件里的。现实生活中你很有可能会横跨几个文件一起修改。请务必注意，在 IPython 里你每次 run 的时候只有被 run 的那个文件里的东西会是最后修改的版本，其 import 的东西如果在期间被修改是不会反应出来的。 这个的原理就跟你在 Python shell 里在修改前修改后重复 import 某个模块不会有作用是一样的，Python 神奇的 import 机制不会去追踪其他模块的修改。你可以手动用 reload 函数来重新载入，你也可以使用 IPython 的 autoreload 功能来让你忽略这个问题。个人来说我没怎么用过这个功能，IPython 没有默认开启它可能也是有些顾虑，请自己评估看看。 另外你应该已经注意到，run 的效果基本上就是把你的代码拷贝进 IPython 里执行一遍。对于没有 main 的文件，你也可以 run，这样里面定义的函数和 class 就会反映出你的更改。","tags":"技术"},{"title":"我用Emacs，后来转向Vim——Vim学习之Vim键盘图（绝对值得珍藏）","url":"2013/12/我用Emacs，后来转向Vim——Vim学习之Vim键盘图（绝对值得珍藏）/","text":"Emacs本来就比较臃肿，麻烦。当我发现Vim键盘图时，我就渐渐转向Vim，追随Unix/Linux哲学去了。。 我用了Emacs三个月，因为它的学习曲线没Vim陡，这点吸引了，我使用Linux才7、8个月，不明白Vim的简即是美，反而觉得是拒人千里(这点真和人一样)。 于是反思自己，后来转向Vim，今天把Emacs卸载了。 但是慢慢觉得Emacs有以下缺点： 命令至少双键同按，结果就是必须双手同时使用。 真的对末尾指不友好，不是Ctrl就是Alt，有人趣说恨不得配个脚踏板。 体积大，占资源多，反应相对慢。 相反，渐渐发现Vim的优点很多： 简即是美，单键命令，夸张说可以腾出一只手来。 99.9%的把握，是Linux就有Vim。 对Linux其它命令sed,tr等有天生的相关性，这就好比微软产品之间的连通性。 体积小，反应快。 命令行使用。 vim的windows版兼容性好。兼容对txt的操作Ctrl+S等。 符合Unix/Linux体系的根本思想，就是它的哲学。 最后一点，越学越有趣，自己发现组合。这就好像使用HTML标记来写网页一样，设计者将最大的发挥空间给了你。 再来讨论下：神之编辑器 VS 编辑器之神 编辑器之神，首先强调是编辑器，而且是其中的神！ 神之编辑器，神在前，编辑器也是其中的功能。(也译：神一样的编辑器，神的编辑器) Unix/Linux的设计哲学：做一件事，并做好一件事。 Emacs虽然强大，但它在Linux多少违反了其它大多Linux软件所遵守的约定，显得例外，特别不一样。 Emacs存在并兴盛说明它有价值，我并不是抹黑它。而是对于追求真正的纯正的Linux思想的人，可能容不下一点突兀。 我不会吃回头草。 相关阅读：Vim vs Emacs http://blog.sina.com.cn/s/blog_8d1e632101018uyg.html 题外话：我写完后google了一下，搜索site: http://www.cnblogs.com/weishun ，本文赫然在最后一页最后一栏！","tags":"技术"},{"title":"微信公众平台开发（免费云BAE+高效优雅的Python+网站开放的API）","url":"2013/10/微信公众平台开发（免费云BAE+高效优雅的Python+网站开放的API）/","text":"虽然校园App是个我认为的绝对的好主意，但最近有个也不错的营销+开发的模式出现：微信平台+固定域名服务器。 微信公众平台的运行模式不外两个: 一、机器人模式或称转发模式，将说话内容转发到服务器上完成，拿服务器的回复再一次转发，就完成一次问答谈话。 二、人控模式，一个自然人登陆公众平台上，能直接接触到所有关注者，与之交互，这一定也是最累的。 微信公众平台若是服务号，用来做微网站，省去了登录认证过程。但说白了就是微信定制版的微网站。这我一学期后才搞懂，如果早些弄懂就不会做那么多无用功。 微信公众平台须有正面头像+身份证的照片来实名认证，非常严格。顺便一说，微信公众平台官方说法是偏支持大企而非个人。 服务器(准确的说只是一个引擎)有新浪云SAE，百度云BAE，阿里云AAE。 SAE最早，但使用云豆消费，注册只送500个。到现在，BAE允许创建10个应用而不用实名认证，SAE是需实名认证的。还有BAE比SAE强的就是支持git，虽然两者都支持svn，非常合时，刚好我学习git中，我果断选择BAE。云上建的每个应用可有20个版本，但任一个版都可以并且唯一上线。 AAE (阿里云)一直不支持python，很让人失望。 第一阶段：入门——轻轻走过飘过。 下面是用数天时间借鉴前人成果Kingson的《 一个用Python和Bottle实现基于微信公众平台API和SAE查询豆瓣电影的简单应用 》开发的。 这个例子非常适合在用Python的开发人员。经过一番狠狠的折腾，我还弄懂了其它问题：云的概念、OAuth、token、微信API调用，网站API调用、python等，百度谷歌都会有答案。 还有很多像微信API通信认证(话说竞然用xml而不用json通信，不过这是取舍问题，无可厚非)，python web框架，git对接云服务器……用了我许多时间。过程曲折复杂，看起来只是转移一下云平台，但实名认证，开发者域名的认证等浪费了我很多时间，因为没经验，很多各种问题都撞上了，尤其是我这种粗心大意，心眼碗粗的人，整个过程实在不算顺利，但我相信别人都会比我顺利，因为我连最低级的错都犯了。不多说，贴上关键代码代码。 下载地址： http://pan.baidu.com/s/1d1g3lusr/bin/env python # coding=utf-8 __author__ = 'jszhou' from bottle import * import hashlib import xml.etree.ElementTree as ET import urllib2 # import requests import json app = Bottle () \"\"\" Change Log: 03-04--03-08 完成微信API+Python自动回复代码雏形，可以通过电影ID查询电影信息，以Text形式返回给用户电影 Title和电影summary # 03-11 完成通过电影名称查询并返回图文格式的数据 # 03-13 1.增加给新关注的用户自动返回\"欢迎关注豆瓣电影，输入电影名称即可快速查询电影讯息哦！\"信息的功能 2.完善注释信息 关于本地调试问题： 微信没有提供本地调试功能，给用户造成不小的麻烦。 打开Bottle的Debug功能，在本地运行自己的代码（启动Server），使用Chrome或Firefox上的Advanced Rest Client插件来模拟微信服务器向自己的应用发送请求， 这样就可以看到详细的报错信息，方便开发者定位修复问题，其相当于，自己的应用是SAE，而Advanced Rest Client模拟的是新微信客户端和微信服务器。 也有同学自己写脚本，模拟微信服务器发送数据，这也是同样的道理。 遗留问题： 1.从豆瓣拿到的海报图片都是竖向的，而微信中显示的是横向的，所以在微信看图片就被裁了一节，不过还好能看， 如何能完整显示海报图片，有待进一步research; 2.现在的通过电影名称返回的结果，实际上是拿的豆瓣返回的第一条数据，这样就有可能不准确，如何精确匹配用户的 查询条件，也还需要进一步研究。 \"\"\" @app.get ( \"/\" ) def checkSignature (): \"\"\" 这里是用来做接口验证的，从微信Server请求的URL中拿到\"signature\",\"timestamp\",\"nonce\"和\"echostr\"， 然后再将token, timestamp, nonce三个排序并进行Sha1计算，并将计算结果和拿到的signature进行比较， 如果相等，就说明验证通过。 话说微信的这个验证做的很渣，因为只要把echostr返回去，就能通过验证，这也就造成我看到一个Blog中， 验证那儿只返回了一个echostr，而纳闷了半天。 附微信Server请求的Url示例：http://yoursaeappid.sinaapp.com//?signature=730e3111ed7303fef52513c8733b431a0f933c7c &echostr=5853059253416844429&timestamp=1362713741&nonce=1362771581 \"\"\" token = \"\" # 你在微信公众平台上设置的TOKEN signature = request . GET . get ( 'signature' , None ) # 拼写不对害死人那，把signature写成singnature，直接导致怎么也认证不成功 timestamp = request . GET . get ( 'timestamp' , None ) nonce = request . GET . get ( 'nonce' , None ) echostr = request . GET . get ( 'echostr' , None ) tmpList = [ token , timestamp , nonce ] tmpList . sort () tmpstr = \" %s%s%s \" % tuple ( tmpList ) hashstr = hashlib . sha1 ( tmpstr ) . hexdigest () if hashstr == signature : return echostr else : return \"wws:indentify error\" def parse_msg (): \"\"\" 这里是用来解析微信Server Post过来的XML数据的，取出各字段对应的值，以备后面的代码调用，也可用lxml等模块。 \"\"\" recvmsg = request . body . read () # 严重卡壳的地方，最后还是在Stack OverFlow上找到了答案 root = ET . fromstring ( recvmsg ) msg = {} for child in root : msg [ child . tag ] = child . text return msg def query_movie_info (): \"\"\" 这里使用豆瓣的电影search API，通过关键字查询电影信息，这里的关键点是，一是关键字取XML中的Content值， 二是如果Content中存在汉字，就需要先转码，才能进行请求 \"\"\" movieurlbase = \"http://api.douban.com/v2/movie/search\" DOUBAN_APIKEY = \"\" # 这里需要填写你自己在豆瓣上申请的应用的APIKEY movieinfo = parse_msg () searchkeys = urllib2 . quote ( movieinfo [ \"Content\" ] . encode ( \"utf-8\" )) # 如果Content中存在汉字，就需要先转码，才能进行请求 url = ' %s ?q= %s &apikey= %s ' % ( movieurlbase , searchkeys , DOUBAN_APIKEY ) # return \"<p>{'url': %s}</p>\" % url # url = '%s%s?apikey=%s' % (movieurlbase, id[\"Content\"], DOUBAN_APIKEY) # resp = requests.get(url=url, headers=header) resp = urllib2 . urlopen ( url ) movie = json . loads ( resp . read ()) # return \"<p>{'movie': %s}</p>\" % movie # info = movie[\"subjects\"][0][\"title\"] + movie[\"subjects\"][0][\"alt\"] # info = movie['title'] + ': ' + ''.join(movie['summary']) return movie # return info def query_movie_details (): \"\"\" 这里使用豆瓣的电影subject API，通过在query_movie_info()中拿到的电影ID，来获取电影的summary。 \"\"\" movieurlbase = \"http://api.douban.com/v2/movie/subject/\" DOUBAN_APIKEY = \"\" # 这里需要填写你自己在豆瓣上申请的应用的APIKEY id = query_movie_info () url = ' %s%s ?apikey= %s ' % ( movieurlbase , id [ \"subjects\" ][ 0 ][ \"id\" ], DOUBAN_APIKEY ) resp = urllib2 . urlopen ( url ) description = json . loads ( resp . read ()) description = '' . join ( description [ 'summary' ]) return description @app.post ( \"/\" ) def response_msg (): \"\"\" 这里是响应微信Server的请求，并返回数据的主函数，判断Content内容，如果是\"Hello2BizUser\"，就 表明是一个新注册用户，调用纯文本格式返回，如果是其他的内容就组织数据以图文格式返回。 基本思路： # 拿到Post过来的数据 # 分析数据（拿到FromUserName、ToUserName、CreateTime、MsgType和content） # 构造回复信息（将你组织好的content返回给用户） \"\"\" #拿到并解析数据 msg = parse_msg () #设置返回数据模板 #纯文本格式 textTpl = \"\"\"<xml> <ToUserName><![CDATA[ %s ]]></ToUserName> <FromUserName><![CDATA[ %s ]]></FromUserName> <CreateTime> %s </CreateTime> <MsgType><![CDATA[ %s ]]></MsgType> <Content><![CDATA[ %s ]]></Content> <FuncFlag>0</FuncFlag> </xml>\"\"\" #图文格式 pictextTpl = \"\"\"<xml> <ToUserName><![CDATA[ %s ]]></ToUserName> <FromUserName><![CDATA[ %s ]]></FromUserName> <CreateTime> %s </CreateTime> <MsgType><![CDATA[news]]></MsgType> <ArticleCount>1</ArticleCount> <Articles> <item> <Title><![CDATA[ %s ]]></Title> <Description><![CDATA[ %s ]]></Description> <PicUrl><![CDATA[ %s ]]></PicUrl> <Url><![CDATA[ %s ]]></Url> </item> </Articles> <FuncFlag>1</FuncFlag> </xml> \"\"\" #判断Content内容，如果等于\"Hello2BizUser\"，表明是一个新关注用户，如果不是，就返回电影标题，电影简介 #和电影海报组成的图文信息 if msg [ \"Content\" ] == \"Hello2BizUser\" : echostr = textTpl % ( msg [ 'FromUserName' ], msg [ 'ToUserName' ], str ( int ( time . time ())), msg [ 'MsgType' ], u \"欢迎关注豆瓣电影，输入电影名称即可快速查询电影讯息哦！\" ) return echostr else : Content = query_movie_info () description = query_movie_details () echostr = pictextTpl % ( msg [ 'FromUserName' ], msg [ 'ToUserName' ], str ( int ( time . time ())), Content [ \"subjects\" ][ 0 ][ \"title\" ], description , Content [ \"subjects\" ][ 0 ][ \"images\" ][ \"large\" ], Content [ \"subjects\" ][ 0 ][ \"alt\" ]) return echostr if __name__ == \"__main__\" : # Interactive mode debug ( True ) run ( app , host = '127.0.0.1' , port = 8080 , reloader = True ) else : # Mod WSGI launch # import sae # debug(True) # os.chdir(os.path.dirname(__file__)) # app = default_app() # application = sae.create_wsgi_app(app) ################################################# #os.chdir(os.path.dirname(__file__))#Forbidden to access from bae.core.wsgi import WSGIApplication application = WSGIApplication ( app ) 注：代码中用json.dumps会更好。 后注：此注不对。 深入阶段，将http:// www.cnblogs.com/mchina/tag/%E5% BE % AE %E4% BF %A1%E5%85% AC %E4% BC %97/里的功能用python实现之 。 …… 本代码需要与bottle.py一并上传到服务器空间。 微信开发调试小工具下载： http://www.cnblogs.com/linkbiz/archive/2013/05/16/3080306.html 附上一些特别信息： 本人微信公众号pythonwoodpub， 开发项目澳洲红酒微信服务号，","tags":"技术"},{"title":"笔迹之始","url":"2013/07/笔迹之始/","text":"笔迹之始 我大学开始时是个商科，或者说文科的学生。非计算机系的，仅会计算机。 后自学多门计算机语言，越觉编程之高明，神奇。 如今的世界，是技术革命的世界，如今的中国，是互联网带头的民主，如今的社会，是正在电子虚拟化的社会，正如《黑客帝国》。 我亲历大学，觉大学学术之流甚少，同学进取之心微微。 然而，举头望明月，我爸非李刚。甚惑，曾迷，思而不得。 何以自强？我常常自问。 技术。顿觉当时\"师夷长技\"之风高啊！ 理性的头脑，只能接受逻辑思维的单神经细胞，这正好叫因地制宜。 于是，大学一学期之后，从2012年初始，奋身地转向技术领域，至今1年7个月了。 选择这里开博是因为搜索到的好文章，算这里最多。CSDN杂而不精，百度空间，开源中国，网易，新浪，平平无奇。 博客究竟为什么？为了有共同爱好的你，朋友，兄弟也好。 总之专注于技术的每一人都是我写博客时脑海中的读者。 自学所获： 1、熟悉C/C++,Linux桌面。java,汇编一般。 2、精通Visual Studio C++，犹以VC6突出。 3、对操作系统的实现一知半解，曾用NASM+C模仿编写系统，后中断。 4、会使用G++， GCC ，make，vim，等Linux下的工具编程。 5、略懂HTML、 CSS 、 JAVASCRIPT 、JSP等网页相关。 未来方向： 1、移动平台 2、Linux 3、C++ 2013-07-06 18:22:37 暨南大学 后天开始期末考了。","tags":"技术"}]}